4. mkdir SI_2024_lab1_223214 (креираме локален директориум)
cd SI_2024_lab1_223214 (влегуваме во директориумот)
git config --global user.name "Teodora Nikolovska"
git init (иницијализација на директориумот)
5. git remote add origin https://github.com/nikolovskateodora/SI_2024_lab1_223214.git (поврзување на локалниот репозиториум со оддалечениот репозиториум)
6. nano README.md (креираме датотека, веднаш внесуваме податоци)
git add README.md (го ставаме во staged состојба)
git commit -m "Initial commit" (правиме commit со порака "Initial commit")
7.git add --all (ги ставаме во staged состојба)
git commit --all -m "Add starter code" (правиме commit со порака "Add starter code")
8. git push -u origin master (синхронизација на сите гранки)
9. git branch bug1 (отварање на нова гранка bug1 од гранката master)
git branch bug2 (отварање на нова гранка bug1 од гранката master)
10. git checkout bug1 (се префрлуваме од гранката master на bug1)
11. nano SILab1_1.java (поправаме грешка во методот filterOddLengthStrings)
git add SILab1_1.java (го ставаме во staged)
git commit -m "Fix wrong condition in filterOddLengthStrings" (правиме commit со порака "Fix wrong condition in filterOddLengthStrings")
12.git checkout bug2 (се префрлуваме од гранката master на bug2)
13.nano SILab1_2.java (поправаме грешка во методот makeBigStringFrom)
git add SILab1_2.java (го ставаме во staged)
git commit -m "Fix wrong condition in makeBigStringFrom" (правиме commit со порака "Fix wrong condition in makeBigStringFrom")
14.git checkout bug1 (се враќаме на гранката bug1)
15.nano SILab1Main.java (додаваме во линија 16)
git add SILab1Main.java (го ставаме во staged)
git commit -m "Call method filterOddLengthStrings in main class" (правиме commit со порака "Call method filterOddLengthStrings in main class")
16.git checkout bug2 (се враќаме на гранката bug2)
17. nano SILab1Main.java (додаваме во линија 16)
git add SILab1Main.java (го ставаме во staged)
 git commit -m "Call method makeBigStringFrom in main class" (правиме commit со порака "Call method makeBigStringFrom in main class")
18. git checkout bug1 
git push -u origin bug1
git checkout bug2
git push -u origin bug2 (правиме синхронизација на гранките)
19. git checkout master (се префрлуваме на пранката master)
20. git merge bug1 (ја спојуваме гранката bug1 со master, стратеgија Fast-forward)
21. git push --all origin (ги синхронизираме сите гранки)
22. git checkout bug2 (се префрлуваме на пранката bug2)
23. git rebase master (правиме rebase спрема гранката master, настанува конфликт, бидејќи на гранката мастер се повикува друга метода на истата линија)
nano SILab1Main.java (го решаваме конфликтот)
git add SILab1Main.java (го ставаме во staged)
git rebase --continue (продолжуваме со rebase)
24. git checkout master (се префрлуваме на гранката master)
25. git merge bug2 (ја спојуваме гранката bug2 со master, стратеgија Fast-forward)
26. git push origin master
 git push origin bug1 (синхронизација на гранките master и bug1)
27. git push --force origin bug2 (синхронизација на гранката bug2)
28. git log > logs.txt (креираме датотека logs.txt, и резултат од git log (приказ на досегашни логови) се запишува во датотеката logs.txt)
git add * (ставаме со staged) 
git commit -m "Final commit" (правиме commit со порака "Final commit")
29. git push --all origin (синхронизација на сите гранки)